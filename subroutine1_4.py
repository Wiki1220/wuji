import numpy as np

def compute_local_moran():
    # 输入 A 和 C
    A = np.array([  
        [1, 115.1, 264.5, 152.8, 270.9, 396.6, 141.3, 161.4, 177.2, 47.3, 181.7, 248.3, 359.2],
        [115.1, 1, 265.9, 105.1, 216.9, 365.1, 149.6, 275.3, 219.1, 65.2, 93.1, 201.3, 328.5],
        [264.5, 265.9, 1, 359.4, 475.1, 156.7, 120.1, 301.4, 437.1, 251.9, 202.8, 107.7, 114.9],
        [152.8, 105.1, 359.4, 1, 117.1, 463.1, 250.1, 304.1, 142.7, 127.6, 186.1, 309.2, 429.9],
        [270.9, 216.9, 475.1, 117.1, 1, 572.0, 372.0, 406.9, 178.7, 247.7, 293.4, 416.0, 539.9],
        [396.6, 365.1, 156.7, 463.1, 572, 1, 267.1, 461.6, 572.5, 379.8, 278.8, 162.2, 46.9],
        [141.3, 149.6, 120.1, 250.1, 372, 267.1, 1, 212.1, 304.7, 120.9, 139.7, 131.1, 222.1],
        [161.4, 275.3, 301.4, 304.1, 406.9, 461.6, 212.1, 1, 258.4, 206.1, 327.1, 347.0, 418.7],
        [177.2, 219.1, 437.1, 142.7, 178.7, 572.5, 304.7, 258.4, 1, 192.1, 305.5, 409.2, 527.8],
        [47.3, 65.2, 251.9, 127.6, 247.7, 379.8, 120.9, 206.1, 192.1, 1, 142.0, 213.7, 332.6],
        [181.7, 93.1, 202.8, 186.1, 293.4, 278.8, 139.7, 327.1, 305.5, 142, 1, 124.6, 252.9],
        [248.3, 201.3, 107.7, 309.2, 416.0, 162.2, 131.1, 347, 409.2, 213.7, 124.6, 1, 129.1],
        [359.2, 328.5, 114.9, 429.9, 539.9, 46.9, 222.1, 418.7, 527.8, 332.6, 252.9, 129.1, 1]
    ])

    C = np.array([44.87, 50.97, 65.21, 55.2, 38.68, 65.14, 61, 27.91, 31.11, 47.9, 52.16, 57.79, 62.55])

    # 计算 B
    B = 1 / A
    np.fill_diagonal(B, 0)  # 将对角线置为 0

    # 计算局部莫兰指数 M
    mean_C = np.mean(C)
    C_diff = C - mean_C  # 计算 C 与均值的差异
    numerator = np.dot(B, C_diff)  # 计算分子
    denominator = np.sum(C_diff ** 2)  # 计算分母
    M = (C_diff * numerator) / denominator  # 计算局部莫兰指数

    # 输出观察到的局部莫兰指数
    print("局部莫兰指数 M:", M)

    # 进行 p 值检验
    n_permutations = 1000  # 设置蒙特卡洛模拟的次数
    M_random = np.zeros((n_permutations, len(C)))  # 存储随机化后的局部莫兰指数

    # 蒙特卡洛模拟过程
    for perm in range(n_permutations):
        C_random = np.random.permutation(C)  # 随机打乱 C
        C_diff_random = C_random - mean_C  # 计算随机化后的 C_diff
        numerator_random = np.dot(B, C_diff_random)  # 计算随机化后的分子
        M_random[perm, :] = (C_diff_random * numerator_random) / denominator  # 计算随机化后的局部莫兰指数

    # 计算 p 值
    p_values = np.mean(M_random >= M, axis=0)  # 计算 p 值

    # 输出 p 值
    print("p 值:", p_values)

    # 判断显著性
    alpha = 0.05  # 显著性水平
    significance = p_values < alpha  # 显著性检验

    # 输出显著性检验结果
    print("显著性检验结果（True 为显著，False 为不显著）:", significance)

# 调用函数进行计算
compute_local_moran()
